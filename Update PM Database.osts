{"version":"0.2.0","body":"var entry:query\nvar range_end:number\nvar err_cell:ExcelScript.Range\nvar pm_interface:ExcelScript.Worksheet\nvar pm_interface_table:ExcelScript.Table\nvar pm_database:ExcelScript.Worksheet\nvar pm_database_table:ExcelScript.Table\nvar pm_archive_table:ExcelScript.Table\nvar inventory_table:ExcelScript.Table\nclass query{\n  constructor(id:string,contents:(string|number|boolean)[][],date:string,odometer:string,cost:string){\n    this.id = id\n    this.contents=contents\n    this.date = date\n    this.odometer = odometer\n    this.cost = cost\n  }\n  id:string\n  contents:(string|number|boolean)[][]\n  date:string\n  odometer:string\n  cost:string\n}\n\n\n\nfunction main(workbook: ExcelScript.Workbook) {\n  // Your code here\n  init_script(workbook)\n  clear_error()\n  if (pm_interface.getCell(1, 3).getValue().toString() == \"Archive\"){\n    print_error(\"ERROR: In order to update the entry in the database choose the database option in cell D2\")\n    return\n  }\n  if(pm_interface.getCell(4,8).getValue().toString() == \"\"){\n    print_error(\"ERROR: A Date must be entered to save this PM\")\n    return\n  }\n  if(pm_interface.getCell(6,8).getValue().toString() == \"\"){\n    print_error(\"ERROR: Something must be entered as an odometer reading to save this PM\")\n    return\n  }\n  \n  if (verify_table()==0 && pm_interface.getCell(1,3).getValue().toString()==\"Database\"){\n    read_interface()\n    update_inventory()\n    save_record()\n    //reset()\n  }\n\n}\n\nfunction clear_error(){\n  err_cell.setValue(\"\")\n}\n\nfunction reset(){\n  pm_interface.getRange(\"B5:G46\").setValue(\"\")\n  pm_interface.getCell(4,8).setValue(\"\")\n  pm_interface.getCell(6,8).setValue(\"\")\n}\n\nfunction verify_table(){\n  /*Verify the format of the table is correct before updating the database*/\n  //if(pm_interface.getRange(\"B5:G46\").getValues().toString()==\"\"){}\n\n  var parts_col = pm_interface_table.getRangeBetweenHeaderAndTotal().getColumn(3).getValues()\n  for(var row=0; row<range_end;row++){//loop rows\n    var parts = parts_col[row].toString()\n    var item = \"\"//parts.split(\"[\")[1]\n    var item_id=\"\"\n    while(parts!=\"\"){//loop parts\n      if(parts.includes(\"]\"))\n        item = parts.split(\"]\")[0].trim()\n      else\n        item=\"\"\n\n      if (item[0] != \"[\"){\n        print_error(\"ERROR: ROW \" + (row + 5) + \" OF THE PARTS COLUMN MUST BE IN THE FOLLOWING FORMAT: [ITEM ID:QUANTITY]\")\n        return null\n      }\n\n      if(!item.includes(\":\")&&item[item.length]!=\"]\"){\n        print_error(\"ERROR: ROW \"+(row+5)+\" OF THE PARTS COLUMN MUST BE IN THE FOLLOWING FORMAT: [ITEM ID:QUANTITY]\")\n        return null\n      }\n\n      item_id = item.split(\"[\")[1].split(\":\")[0]\n      if(!search_range(item_id,inventory_table.getRangeBetweenHeaderAndTotal().getColumn(0),true)){\n        //console.log(item_id)\n        print_error(\"ERROR: ROW: \"+(row+5)+\" ITEM: \"+item_id+\" IS NOT IN INVENTORY\")\n        return null\n      }\n\n      parts = parts.substring(parts.indexOf(\"]\")+1,parts.length)  \n    }\n  }\n  return 0\n}\n\n\n\nfunction init_script(workbook:ExcelScript.Workbook){\n  pm_interface = workbook.getWorksheet(\"PM Interface\")\n  pm_interface_table = pm_interface.getTable(\"PMInterface\")\n  pm_database = workbook.getWorksheet(\"PM Database\")\n  pm_database_table = pm_database.getTable(\"PMDatabase\")\n  pm_archive_table = workbook.getWorksheet(\"PM Archive\").getTable(\"PMArchive\")\n  inventory_table = workbook.getWorksheet(\"Inventory\").getTable(\"Table3\")\n  range_end = search_range(\" \",pm_interface_table.getRangeBetweenHeaderAndTotal(),true)-5//-5 is offset of table rel to sheet\n  err_cell = pm_interface.getCell(2,0)\n  if(isNaN(range_end)){\n    range_end = pm_interface_table.getRowCount()\n  }\n  entry = new query(\n    pm_interface.getCell(0,1).getValue().toString()+\"[\"+pm_interface.getCell(1,1).getValue().toString()+\"]\"\n    ,new Array(),\n    pm_interface.getCell(4,8).getValue().toString(),\n    pm_interface.getCell(6,8).getValue().toString(),\n    pm_interface.getCell(2,8).getValue().toString()\n    )\n}\n\nfunction read_interface(){\n  for(var i=0; i<range_end; i++){\n    entry.contents.push(pm_interface_table.getRangeBetweenHeaderAndTotal().getOffsetRange(0,1).getResizedRange(0,-1).getRow(i).getValues()[0])\n  }\n\n  //console.log(entry.contents[0])\n}\n\n\nfunction search_range(search_term: string,range: ExcelScript.Range, exactMatch: boolean) {\n  /*Searches through a range and either returns the row the term was found on or NaN*/\n  let targetCell = range.find(search_term, {\n    completeMatch: exactMatch,\n    searchDirection: ExcelScript.SearchDirection.forward\n  })\n  try { targetCell.getAddress() } catch{ return NaN }\n  if (targetCell.getAddress() != undefined) {//parse first occurence\n    let tempRow = targetCell.getAddress().split(\"!\")[1].toString()\n    tempRow = tempRow.substring(1, tempRow.length)\n    return parseInt(tempRow)\n  }\n  else {\n    return NaN\n  }\n\n}\n\nfunction print_error(msg:string){\n  err_cell.setValue(msg)\n}\n\nfunction save_record(){\n  var record:string[]=new Array(43)\n\n  for(var row = 0; row < range_end;row++){\n    if(row==0)\n      record[row] = entry.id\n    record[row+1]=\"\"\n    for(var col = 0; col<entry.contents[row].length;col++){\n        record[row+1]+=entry.contents[row][col].toString()+\"{<>}\"\n        //console.log(record[row])\n      }\n  }\n\n  //record.push(pm_interface.getCell(4,8).getValue().toString())//date\n  //record.push(pm_interface.getCell(6,8).getValue().toString())//odometer\n  record.push(entry.date)\n  record.push(entry.odometer)\n  record.push(entry.cost)\n\n  //if record is in database update it else add to database\n  var database_row = 0\n  if(!isNaN(database_row = search_range(entry.id,pm_database_table.getRangeBetweenHeaderAndTotal().getColumn(0),true))){\n    //console.log(database_row)\n    var new_value:(string|boolean|number)[][]=new Array()\n    new_value.push(record)\n    pm_database_table.getRangeBetweenHeaderAndTotal().getRow(database_row-2).setValues(new_value)\n  }else{\n    pm_database_table.addRow(-1,record)\n  }\n\n  pm_archive_table.addRow(-1,record)\n\n}\n\nfunction update_inventory(){\n\n  var items:object = new Object()//stores the items used to modify inventory\n  var old_data:object//stores database items\n  var new_data:object//stores interface items\n  var parts_list: string[] = new Array()\n  \n  //FETCH NEW DATA FROM INTERFACE\n  parts_list = new Array()//reset parts list\n  contents = pm_interface_table.getRangeBetweenHeaderAndTotal().getColumn(3).getValues()\n  for(var row in contents){\n    if(contents[row][0]!=\"\"){\n      parts_list.push(contents[row][0].toString())\n    }\n  }\n  new_data = parse_items(parts_list)\n  console.log(\"NEW DATA:\"+new_data)\n\n  //FETCH OLD DATA FROM DATABASE\n  var term = pm_interface.getCell(0, 1).getValue().toString() + \"[\" + pm_interface.getCell(1, 1).getValue().toString() + \"]\"\n  var row_index = search_range(term,pm_database_table.getRangeBetweenHeaderAndTotal().getColumn(0),true)\n  var contents: (string | boolean | number)[][] \n  \n  console.log(row_index)\n  if(!isNaN(row_index)){//old data exists\n    console.log(\"ROW INDEX IS A NUMBER\")\n    contents = pm_database_table.getRangeBetweenHeaderAndTotal().getRow(row_index - 2).getValues()\n    for (var i = 0; i < contents[0].length; i++) {\n      if (contents[0][i].toString().includes(\"{<>}\") && contents[0][i].toString().split(\"{<>}\")[2] != \"\") {\n        parts_list.push(contents[0][i].toString().split(\"{<>}\")[2])\n      }\n    }\n    old_data = parse_items(parts_list)\n\n    items = old_data\n    \n    for(var entry in new_data){\n      if(items[entry]==undefined){\n        items[entry] = -new_data[entry]\n      }else{\n        items[entry] = (parseInt(items[entry])-parseInt(new_data[entry])).toString()\n      }\n    }\n\n  }else{//old data does not exist\n    for(var entry in new_data){\n      //items[entry] = new_data[entry]*-1\n      items[entry] = -new_data[entry]\n      console.log(\"ENTRY: \"+items[entry])\n    }\n  }\n\n  //store in inventory\n  for(var item in items){\n    if(items[item]==0){\n      continue\n    }\n\n    row_index = search_range(item,inventory_table.getRangeBetweenHeaderAndTotal(),true)\n    var qty = inventory_table.getRangeBetweenHeaderAndTotal().getCell(row_index-2,2).getValue().toString()\n    qty = (parseInt(qty)+parseInt(items[item])).toString()\n    inventory_table.getRangeBetweenHeaderAndTotal().getCell(row_index-2,2).setValue(qty)\n  }\n\n}\n\nfunction parse_items(contents:string[]){\n  var new_obj = new Object()\n\n  do {\n    var part = contents.pop()\n    if (part == undefined)\n      break\n\n    for (var i = 0; i < part.split(\"]\").length; i++) {\n      var token = part.split(\"]\")[i]\n      if (token != \"\") {\n        var part_id = token.split(\"[\")[1].split(\":\")[0].toString()\n        var part_amount = token.split(\":\")[1].toString()\n\n        if (new_obj[part_id] == undefined) {\n          new_obj[part_id] = part_amount\n        } else {\n          new_obj[part_id] = (parseInt(new_obj[part_id]) + parseInt(part_amount)).toString()\n        }\n      }\n    }\n  } while (part != undefined)\n  return new_obj\n}\n","description":"","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}