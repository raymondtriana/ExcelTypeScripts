{"version":"0.2.0","body":"/*\n\nAUTHOR: Raymond Levi Triana\n\nDATE: 10/17/22\n\nWORKBOOK:HOS RECORDS\n\nPURPOSE:Auto calculate the pre and post trip times for drivers.\n\n*/\n\nvar database_sheet:ExcelScript.Worksheet\n\nvar database_table:ExcelScript.Table\n\nvar interface_table:ExcelScript.Table\n\nvar yards_table:ExcelScript.Table\n\nvar driverList:data//stores the names of all drivers\n\nvar search_rows:number[]//stores the rows where the driver is located\n\n/*REPLACE DRIVERLIST WITH SIMPLE ARRAY? UPDATE PART WHICH ONLY ADDS UNIQUE NAMES TO SEARCH FOR.DELETE EMPLOYEE*/\n\n\n\nclass data{\n\n  constructor(name:string[],rowIndex:number[]){\n\n    this.name=name\n\n    this.rowIndex=rowIndex\n\n  }\n\n  name:string[]\n\n  rowIndex:number[]\n\n}\n\n\n\nfunction main(workbook: ExcelScript.Workbook) {\n  //console.log(workbook.getWorksheet(\"Interface\").getCell(9,0).getNumberFormat())\n  init(workbook)\n\n  reset_workbook()\n\n  populate_driverList()\n  \n  populate_interface()\n\n}\n\nfunction init(workbook:ExcelScript.Workbook){\n\n    database_sheet = workbook.getWorksheet(\"Database\")\n\n    database_table = database_sheet.getTable(\"Database\")\n\n    interface_table = workbook.getWorksheet(\"Interface\").getTable(\"Interface\")\n\n    yards_table = workbook.getWorksheet(\"Yards\").getTable(\"Yards\")\n\n    driverList = new data(new Array(), new Array())\n\n    search_rows = new Array()\n\n}\n\n\n\nfunction reset_workbook(){\n\n  if(interface_table.getRowCount()>1){\n    interface_table.getRangeBetweenHeaderAndTotal().clear()\n    interface_table.resize(\"A4:L5\")\n  }\n\n  //interface_table.getRangeBetweenHeaderAndTotal().delete(ExcelScript.DeleteShiftDirection.up)\n  \n  clearFilter()\n\n  sortColumn(true,1)\n\n}\n\n\n\nfunction populate_driverList(){\n\n  //store list of driver names\n  var tempArray = database_table.getRangeBetweenHeaderAndTotal().getColumn(1).getValues()\n\n  for(var i = 0; i< tempArray.length;i++){\n\n    if(i==0){\n\n      driverList.name.push(tempArray[i][0].toString())\n\n      driverList.rowIndex.push(i+2)\n\n    }else{\n\n      if( !driverList.name.includes(tempArray[i][0].toString()) ){\n\n        driverList.name.push(tempArray[i][0].toString())\n        driverList.rowIndex.push(i+2)\n      }\n\n    }\n\n  }\n\n}\n\nfunction search_database(search_term:string,range:ExcelScript.Range,exactMatch:boolean){\n\n  if(search_term==\"\")\n    return NaN\n\n  let targetCell = range.find(search_term,{\n\n    completeMatch:exactMatch,\n\n    searchDirection:ExcelScript.SearchDirection.forward\n\n  })\n  try{targetCell.getAddress()}catch{return NaN}\n\n  if (targetCell.getAddress() == undefined)//parse first occurence\n    return NaN\n\n  let tempRow = targetCell.getAddress().split(\"Database!\")[1].toString()\n\n  tempRow = tempRow.substring(1,tempRow.length)\n\n  return parseInt(tempRow)\n}\n\n\n\n\n\nfunction filterByName(name:string){\n\n  let filterCriteria: ExcelScript.FilterCriteria = {\n\n    color: null,\n\n    criterion1: \"=\" + name,\n\n    criterion2: null,\n\n    filterOn: ExcelScript.FilterOn.custom,\n\n    subField: null,\n\n    dynamicCriteria: ExcelScript.DynamicFilterCriteria.unknown,\n\n    icon: null,\n\n    operator: ExcelScript.FilterOperator.or\n\n  };\n\n  database_table.getAutoFilter().apply(database_table.getRange(), 1, filterCriteria)\n\n}\n\n\n\n\n\n\n\nfunction clearFilter(){\n\n  database_table.getAutoFilter().clearCriteria()\n\n}\n\n\n\nfunction sortColumn(isAscending:boolean,col:number){\n\n  let sort: ExcelScript.SortField = {\n\n    ascending: isAscending,\n\n    color: \"000000\",\n\n    key: col,\n\n    sortOn: ExcelScript.SortOn.value\n\n  }\n\n  database_table.getSort().apply([sort])\n\n}\n\n\n\nfunction populate_interface(){\n\n  var rowToAdd: string[] = new Array(12)\n  var visibleCells:string[][]\n  clearFilter()\n\n\n\n\n  for (var i = 0; i < driverList.name.length; i++) {//driverList.length\n  \n    var postTripStart:string=\"\"\n\n    var postTripEnd:string=\"\"\n\n    var preTripStart:string=\"\"\n\n    var preTripEnd:string=\"\"\n\n    var range_start:number = driverList.rowIndex[i]-1\n    var range_end: number = driverList.rowIndex[i+1]\n    if(range_end == undefined || range_end == NaN)\n      range_end = database_table.getRowCount()\n    else\n      range_end-=1\n    var range_size:number = range_end - range_start\n    var range:ExcelScript.Range = database_sheet.getRangeByIndexes(range_start,0,(range_size>0)?range_size:1,11)\n\n    filterByName(driverList.name[i])\n\n    visibleCells = database_sheet.getUsedRange().getVisibleView().getCellAddresses()\n    var targetRow: number =driverList.rowIndex[i] //parseInt(visibleCells[1][0].split(\"A\")[1]) - 1\n    var buffer_2d:(string|number|boolean)[][] = new Array()\n    var buffer_1d : string[] = new Array()\n\n\n    rowToAdd[0] = database_sheet.getCell(targetRow-1,1 ).getValue().toString()//driver name\n\n    buffer_2d = range.getColumn(3).getValues()//OLD:2\n    buffer_1d = remove_duplicates(buffer_2d)\n    rowToAdd[1] = buffer_1d.toString()//co-driver\n\n    buffer_2d = range.getColumn(5).getValues()//OLD:4\n    buffer_1d = remove_duplicates(buffer_2d)\n    rowToAdd[2] = buffer_1d.toString()//tractor\n\n    buffer_2d = range.getColumn(6).getValues()//OLD:5\n    buffer_1d = remove_duplicates(buffer_2d)\n    rowToAdd[3] = buffer_1d.toString()//trailer\n\n    //ROUTE#\n    buffer_2d = range.getColumn(9).getValues()//OLD:8\n    buffer_1d = remove_duplicates(buffer_2d)\n    rowToAdd[4] = buffer_1d.toString()//route#\n\n    //POST TRIP START\n\n    sortColumn(true, 0)//morning->night\n    targetRow = search_database(\"**Post-trip\",range,false)\n    if(targetRow!=NaN){\n      rowToAdd[9] = database_sheet.getCell(targetRow-1,0).getValue().toString()\n    }\n    if(rowToAdd[9]==\"Time\")\n      rowToAdd[9] = \"NO PRE/POST TRIP START\"\n    //PRE TRIP START\n    targetRow = search_database(\"**Pre-trip\",range,false)\n    if(targetRow!=NaN){\n      rowToAdd[5] = database_sheet.getCell(targetRow-1,0).getValue().toString()\n    }\n    if (rowToAdd[5] == \"Time\")\n      rowToAdd[5] = \"NO PRE/POST TRIP START\"\n    //PRE TRIP END\n    if(targetRow!=NaN){\n      for (; targetRow < range_end; targetRow++) {\n        var location = database_sheet.getCell(targetRow-1, 8).getValue().toString()//OLD:7\n        if(!search_yards(location,true)){\n          preTripEnd = database_sheet.getCell(targetRow - 2, 0).getValue().toString()\n          rowToAdd[6] = preTripEnd\n          rowToAdd[8] = location\n          targetRow = range_end\n        }\n      }\n    }else{\n      preTripEnd=\"NO PRE TRIP END\"\n    }\n\n\n    //OFF DUTY\n    //sortColumn(false,0)//night->morning\n    targetRow = search_database(\"Off Duty\",range,true)\n    if(targetRow!=NaN){\n      rowToAdd[10] = database_sheet.getCell(targetRow-1,0).getValue().toString()\n    }else{rowToAdd[10]=\"NO OFF DUTY FOUND\"}\n\n    //FORMULAS\n    rowToAdd[7] = \"=TEXT([@OutOfYard]-[@PreTripStart],\\\"h: m\\\")\"\n    rowToAdd[11] = \"=TEXT([@EndOfShift]-[@PostTripStart],\\\"h: m\\\")\"\n\n    //interface_table.addRow(-1,rowToAdd)\n    var entry:(string|number|boolean)[][] = new Array()\n    entry.push(rowToAdd)\n    interface_table.getRange().getLastRow().setValues(entry)\n    interface_table.getRange().getLastRow().getCell(0, 5).setNumberFormat(\"[$-x-systime]h:mm:ss AM/PM\")\n    interface_table.getRange().getLastRow().getCell(0, 6).setNumberFormat(\"[$-x-systime]h:mm:ss AM/PM\")\n    interface_table.getRange().getLastRow().getCell(0, 9).setNumberFormat(\"[$-x-systime]h:mm:ss AM/PM\")\n    interface_table.getRange().getLastRow().getCell(0, 10).setNumberFormat(\"[$-x-systime]h:mm:ss AM/PM\")\n    var rowcount = interface_table.getRangeBetweenHeaderAndTotal().getRowCount()+1\n    interface_table.resize(\"A4:L\"+(rowcount+4))\n    rowToAdd = new Array(12)\n  }\n}\n\n\nfunction search_yards(search_term: string, exactMatch: boolean) {\n\n  if (search_term != \"\") {\n    let targetCell = yards_table.getRangeBetweenHeaderAndTotal().find(search_term, {\n\n      completeMatch: exactMatch,\n\n      searchDirection: ExcelScript.SearchDirection.forward\n\n    })\n    try { targetCell.getAddress() } catch{ return false }\n    if (targetCell.getAddress() != undefined) {//parse first occurence\n      return true\n    }\n    else {\n      return false\n    }\n\n  }\n\n}\n\nfunction remove_duplicates(buffer:(string|number|boolean)[][]){\n  var temp:string[] = new Array()\n    for(var i = 0 ; i < buffer.length ; i++){\n      if(!temp.includes(buffer[i][0].toString()+\"|\")&&buffer[i][0].toString().split(\"Column\")[0]!=\"\")\n        temp.push(buffer[i][0].toString()+\"|\")\n    }\n  return temp\n}","description":"","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}