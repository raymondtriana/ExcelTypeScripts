{"version":"0.2.0","body":"/*\nAUTHOR: RAYMOND LEVI TRIANA\nDATE: 9/22/22\nPurpose: moves rows from the Out Of Service table which have a date entry for when repairs have been completed to the Repaired table\nWorkBook: OTS Equipment\n*/\n\nlet dataBuffer: (number | string | boolean)[][] = new Array();//buffer meant to store data transferred between tables\nlet colNumber = 7;//the column holding the repairDate\n\nfunction main(workbook: ExcelScript.Workbook) {\n  workbook.getWorksheet(\"OOS\").getProtection().unprotect()\n  moveRows(workbook, workbook.getTable(\"OOSTable\"), workbook.getTable(\"RepairedTable\"),colNumber)\n  workbook.getWorksheet(\"OOS\").getProtection().protect()\n  return 0;\n}\n\nfunction moveRows(workbook: ExcelScript.Workbook,srcTable: ExcelScript.Table,destTable: ExcelScript.Table,colNumber: number){\n  /*\n  PURPOSE:\n  moves the rows of a srcTable to a destTable if there are contents in the colNumber for that row\n  */\n\n  //check that both tables are valid tables\n  if(!srcTable||!destTable){\n    console.log(\"ERROR: either srcTable or destTable names are invalid!!!\")\n    return -1;\n  }\n\n  let srcRange = srcTable.getRangeBetweenHeaderAndTotal();//get the range of the src table\n  let srcRows:(number | string | boolean)[][] = srcRange.getValues();//2d array of the rows of the srctable\n  let rowAddress: string[]=[];//stores the address of moved rows to know which to delete later\n\n  //loop through the 2d array of the src table\n  for(let i = 0; i<srcRows.length;i++){\n    let j:(number|string|boolean);\n    if(srcRows[i][colNumber]!=\"\"){//if there is a date\n      //add the row to the buffer\n      dataBuffer.push(srcRows[i])\n      //store the address of the copied row\n      rowAddress.push(srcRange.getIntersection(srcRange.getCell(i, 0).getEntireRow()).getAddress());\n    }\n  }\n\n  //add rows to the destTable\n  try{\n    destTable.addRows(-1,dataBuffer)\n    destTable.getSort().apply([{\n      //subField: null,\n      ascending: false,\n      //color: \"#000000\",\n      sortOn: ExcelScript.SortOn.value,\n      //icon: null,\n      //dataOption: ExcelScript.SortDataOption.normal,\n      key: 7\n    }])\n  }catch{\n    console.log(\"NO DATA TO MOVE\")\n  }\n\n  //remove the rows from the srcTable\n  rowAddress.reverse().forEach((address) => {\n\n    //If theres 1 row left\n    if(srcTable.getRowCount()==1){//save the formulas in the final row from being deleted\n      var formulas: (number | string | boolean)[][] = srcTable.getRangeBetweenHeaderAndTotal().getFormulas();\n      //clear non formula columns\n      formulas[0][0] = formulas[0][2] = formulas[0][5] = formulas[0][6] = formulas[0][7] = \"\"\n      //INSERT FORMULAS\n      srcTable.getRangeBetweenHeaderAndTotal().setValues(formulas)\n      return 0;\n    }\n    else{//if theres >1 row left\n      srcTable.getWorksheet().getRange(address).delete(ExcelScript.DeleteShiftDirection.up);//remove row\n    }\n  });\n\n  //* DEBUG ONLY\n  //console.log(dataBuffer)\n  //*/\n  \n  return 0;\n}","description":"","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{\"result\":{\"type\":\"number\"}}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}