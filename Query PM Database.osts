{"version":"0.2.0","body":"/*\nAUTHOR: Raymond Levi Triana\nDATE:10/20/2022\nWORKBOOK:Maintenance Requests\nPURPOSE:Allows the searching of PM records based on type and ID\n*/\nvar delimiter:string\nvar entry:(string|boolean|number)[][]\nvar date:string\nvar odometer:string\nvar entry_location:number\nvar pm_database_table:ExcelScript.Table\nvar pm_database:ExcelScript.Worksheet\nvar pm_interface:ExcelScript.Worksheet\nvar pm_archive_table:ExcelScript.Table\nvar pm_archive_list:ExcelScript.Table\nvar item_id:string\n\nconst cellNames={\n  PMID:\"PMID\",\n  PMType:\"PMType\",\n  PMDB:\"PMDB\"\n}\n\nfunction main(workbook: ExcelScript.Workbook) {\n    // Your code here\n  init_script(workbook)\n  reset_interface()\n\n  if(pm_interface.getRange(cellNames.PMID).getValue().toString()==\"\"){\n    print_error(\"PLEASE PROVE AN ID TO SEARCH\")\n    return\n  }\n\n  if(pm_interface.getRange(cellNames.PMDB).getValue().toString() == \"Database\"){\n    if(!isNaN(entry_location = search_range(item_id,pm_database_table.getRangeBetweenHeaderAndTotal().getColumn(0),true))){\n      update_interface(read_database())\n    }else{\n      print_error(\"ERROR: \"+item_id+\" IS NOT IN THE DATABASE. TO ADD IT INPUT DATA INTO THE TABLE AND PUSH Update Database\")\n    }\n  }else{\n    if (pm_interface.getRange(cellNames.PMDB).getValue().toString() == \"Archive\"){\n      if(pm_interface.getCell(4,8).getValue().toString() == \"\"){\n        print_error(\"NO DATE PROVIDED, ATTEMPTING TO DISPLAY ALL PMs FOR THIS UNIT\")\n        print_pms(item_id)\n      }else{\n        update_interface(read_archive())\n      }\n    }\n  }\n}\n\nfunction init_script(workbook:ExcelScript.Workbook){\n  delimiter = \"{<>}\"\n  entry_location=NaN\n  entry = new Array()\n  pm_interface = workbook.getWorksheet(\"PM Interface\")\n  pm_database = workbook.getWorksheet(\"PM Database\")\n  pm_database_table = pm_database.getTable(\"PMDatabase\")\n  pm_archive_table = workbook.getWorksheet(\"PM Archive\").getTable(\"PMArchive\")\n  pm_archive_list = pm_interface.getTable(\"PMList\")\n  item_id = pm_interface.getCell(0,1).getValue().toString()+\"[\"+pm_interface.getCell(1,1).getValue().toString()+\"]\"\n}\n\nfunction reset_interface(){\n  pm_interface.getCell(2,0).setValue(\"\")\n  pm_interface.getRange(\"B5:G46\").setValue(\"\")\n  //pm_interface.getCell(4,6).setValue(\"\")\n  pm_interface.getCell(6,8).setValue(\"\")\n  pm_archive_list.getRangeBetweenHeaderAndTotal().clear()\n  pm_interface.getProtection().unprotect()\n  pm_archive_list.resize(\"I9:J10\")\n  pm_interface.getProtection().protect()\n}\n\nfunction print_pms(item_id:string){\n  var visible_range:ExcelScript.RangeView\n  var new_row:(string|boolean|number)[] = new Array()\n\n  clear_filter(pm_archive_table)\n  sort_table(pm_archive_table,0,true)\n  filter_table(pm_archive_table,item_id,0)\n\n  visible_range = pm_archive_table.getRangeBetweenHeaderAndTotal().getVisibleView()\n  var visible_rows = visible_range.getRows()\n  for(var row in visible_rows){\n    var cache_row = visible_rows[row].getValues()\n    //console.log(\"ID: \"+cache_row[0][0] + \" DATE: \"+cache_row[0][43])\n    new_row[0]=(cache_row[0][0])\n    new_row[1]=(cache_row[0][43])\n    pm_interface.getProtection().unprotect()\n    pm_archive_list.addRow(-1,new_row)\n    pm_interface.getProtection().protect()\n  }\n}\n\n\n\nfunction read_archive(){\n  date = pm_interface.getCell(4,8).getValue().toString()\n  clear_filter(pm_archive_table)\n  filter_table(pm_archive_table,item_id,0)\n  filter_table(pm_archive_table,date,43)\n\n  var visible_row = pm_archive_table.getRangeBetweenHeaderAndTotal().getVisibleView().getValues()\n  var temp_row:string[] = new Array()\n  var contents:(string|boolean|number)[][] = new Array()\n  visible_row[0].shift()\n  visible_row[0].pop()//remove cost\n  odometer = visible_row[0].pop().toString()\n  date = visible_row[0].pop().toString()\n  for(var member=0;member< visible_row[0].length;member++){\n    temp_row = visible_row[0][member].toString().split(\"{<>}\")\n    temp_row.pop()\n    \n    if(temp_row.length==0)\n      temp_row= new Array(4)\n\n    if(member<42)\n      contents.push(temp_row)\n  }\n\n\n  //console.log(contents)\n  return contents\n}\n\n\n\n\n\nfunction print_error(msg:string){\n  pm_interface.getCell(2,0).setValue(msg)\n}\n\n\n\nfunction search_range(search_term: string, range: ExcelScript.Range, exactMatch: boolean) {\n  /*Searches through a range and either returns the row the term was found on or NaN*/\n  let targetCell = range.find(search_term, {\n    completeMatch: exactMatch,\n    searchDirection: ExcelScript.SearchDirection.forward\n  })\n  try { targetCell.getAddress() } catch{ return NaN }\n  if (targetCell.getAddress() != undefined) {//parse first occurence\n    let tempRow = targetCell.getAddress().split(\"!\")[1].toString()\n    tempRow = tempRow.substring(1, tempRow.length)\n    return parseInt(tempRow)\n  }\n  else {\n    return NaN\n  }\n\n}\n\nfunction update_interface(contents:(string|boolean|number)[][]){\n  console.log(contents)\n  pm_interface.getProtection().unprotect()\n  pm_interface.getRange(\"B5:G46\").setValues(contents)\n  pm_interface.getCell(4,8).setValue(date)\n  pm_interface.getCell(6,8).setValue(odometer)\n  pm_interface.getProtection().protect()\n}\n\nfunction read_database(){\n  var contents:(string|boolean|number)[][] = new Array()\n  var row_data: (string | boolean | number)[][] = pm_database_table.getRangeBetweenHeaderAndTotal().getRow(entry_location - 2).getValues()\n  var content_row:(string|boolean|number)[] = new Array()\n  var content_string:(string|boolean|number)=\"\"\n\n  for(var i=1;i<row_data[0].length-3;i++){\n    content_string = row_data[0][i]//fetch each column\n    //console.log(content_string)\n    for(var j=0;j<6;j++){\n      //console.log( content_string.toString().split(\"{<>}\")[j])\n      content_row.push(content_string.toString().split(\"{<>}\")[j])\n    }\n    contents.push(content_row)\n    //console.log(row_data[0][44])\n    content_row = new Array()\n  }\n  date = row_data[0][43].toString()\n  odometer = row_data[0][44].toString()\n\n  //console.log(contents)\n  return contents\n\n}\n\nfunction filter_table(table:ExcelScript.Table,term:string,col:number) {\n\n  let filterCriteria: ExcelScript.FilterCriteria = {\n\n    color: null,\n\n    criterion1: \"=\" + term,\n\n    criterion2: null,\n\n    filterOn: ExcelScript.FilterOn.custom,\n\n    subField: null,\n\n    dynamicCriteria: ExcelScript.DynamicFilterCriteria.unknown,\n\n    icon: null,\n\n    operator: ExcelScript.FilterOperator.or\n\n  };\n\n  table.getAutoFilter().apply(table.getRange(), col, filterCriteria)\n\n}\n\n\n\n\nfunction clear_filter(table:ExcelScript.Table) {\n  table.getAutoFilter().clearCriteria()\n}\n\n\n\n\nfunction sort_table(table:ExcelScript.Table,col:number,isAscending:boolean){\n  let sort: ExcelScript.SortField = {\n\n    ascending: isAscending,\n\n    color: \"000000\",\n\n    key: col,\n\n    sortOn: ExcelScript.SortOn.value\n\n  }\n\n  table.getSort().apply([sort])\n}","description":"","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}