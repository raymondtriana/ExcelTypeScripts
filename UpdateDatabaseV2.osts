{"version":"0.2.0","body":"var workbook: ExcelScript.Workbook\nvar interface_sheet: ExcelScript.Worksheet\nvar inventory_sheet: ExcelScript.Worksheet\nvar inventory_range: ExcelScript.Range\nvar database_sheet: ExcelScript.Worksheet\nvar database_table: ExcelScript.Table\nvar database_range: ExcelScript.Range\nvar parts_table: ExcelScript.Table\nvar archive_table: ExcelScript.Table\nvar ticket: interface_form\n\nclass interface_form {\n  ticket_num: string\n  technician: string\n  corrective_action: string\n  completion_date: string\n  severity: string\n  ticket_cost: string\n  parts_list: parts[]\n  constructor(ticket_num: string, technician: string, corrective_action: string, completion_date: string, severity: string, ticket_cost: string) {\n    this.ticket_num = ticket_num\n    this.technician = technician\n    this.corrective_action = corrective_action\n    this.completion_date = completion_date\n    this.severity = severity\n    this.parts_list = new Array()\n    this.ticket_cost = ticket_cost\n  }\n  savePartsTable() {\n    for (var i = 0; i < parts_table.getRowCount(); i++) {\n      if (parts_table.getRangeBetweenHeaderAndTotal().getCell(i, 0).getValue() != \"\")\n        this.parts_list.push(\n          new parts(\n            parseInt(parts_table.getRangeBetweenHeaderAndTotal().getCell(i, 0).getValue().toString()),\n            parts_table.getRangeBetweenHeaderAndTotal().getCell(i, 1).getValue().toString(),\n            parts_table.getRangeBetweenHeaderAndTotal().getCell(i, 2).getValue().toString()\n          )\n        )\n    }\n  }\n  updateDatabase() {\n    var targetCell = database_range.find(this.ticket_num.toString(), {\n      completeMatch: true,\n      searchDirection: ExcelScript.SearchDirection.forward\n    })\n    var targetRow: number = -1\n    if (targetCell) {//if ID is in table\n      var parts_string = \"\"\n      for (var i = 0; i < this.parts_list.length; i++) {\n        var part = this.parts_list[i]\n        parts_string += \"[\" + i + \"]\" + \"{\" + \"ID:\" + part.id + \",\" + \"QTY:\" + part.qty + \",\" + \"DESC:\" + part.desc + \"}\\n\"\n      }\n      targetRow = parseInt(targetCell.getAddress().split(\"A\")[1]) - 1\n      database_sheet.getCell(targetRow, 14).setValue(this.technician)\n      database_sheet.getCell(targetRow, 15).setValue(this.corrective_action)\n      database_sheet.getCell(targetRow, 17).setValue(this.ticket_cost)\n      database_sheet.getCell(targetRow, 7).setValue(this.severity)\n      if (parts_string != \"\") {\n        database_sheet.getCell(targetRow, 16).setValue(parts_string)\n        return 0\n      }\n    } else {//if ID is not in table\n      console.log(\"ERROR: ID IS NOT IN TABLE\")\n      return null\n    }\n  }\n  updateInventory() {\n    var inventory_cell: ExcelScript.Range\n    var inventory_row: number\n    var database_cell: ExcelScript.Range\n    var database_row: number\n    var database_text: string\n    var stored_parts: string[]\n    var stored_id: string\n    var stored_qty: number\n    var updatedAmount: number\n\n    //do nothing if parts table is empty\n    if (parts_table.getRangeBetweenHeaderAndTotal().getCell(0, 0).getValue() == \"\") {\n      return\n    }\n\n    database_cell = database_range.find(this.ticket_num.toString(), {\n      completeMatch: true,\n      searchDirection: ExcelScript.SearchDirection.forward\n    })\n    database_row = parseInt(database_cell.getAddress().split(\"A\")[1]) - 1\n    database_text = database_sheet.getCell(database_row, 16).getValue().toString()\n    stored_parts = database_text.split(\"\\n\")\n\n    console.log(database_sheet.getUsedRange().getRow(database_row).getValues())\n    for (var i = 0; i < stored_parts.length - 1; i++) {//loop through stored parts\n\n      stored_id = stored_parts[i].split(\"ID:\")[1].split(\",QTY:\")[0].toString()\n      stored_qty = parseInt(stored_parts[i].split(\"QTY:\")[1].split(\",DESC:\")[0].toString())\n      \n      inventory_cell = inventory_range.find(stored_id.toString(), {\n        completeMatch: true,\n        searchDirection: ExcelScript.SearchDirection.forward\n      })\n      inventory_row = parseInt(inventory_cell.getAddress().split(\"A\")[1]) - 1\n      inventory_sheet.getCell(inventory_row,2).setValue(\n        parseInt(\n          inventory_sheet.getCell(inventory_row,2).getValue().toString()\n          )+stored_qty\n        )\n      if(parseInt(inventory_sheet.getCell(inventory_row,2).getValue().toString())<0){\n        inventory_sheet.getCell(inventory_row,2).setValue(0)\n      }\n       \n    }\n    \n    for(var i=0;i<this.parts_list.length;i++){\n      inventory_cell = inventory_range.find(this.parts_list[i].id.toString(), {\n        completeMatch: true,\n        searchDirection: ExcelScript.SearchDirection.forward\n      })\n      inventory_row = parseInt(inventory_cell.getAddress().split(\"A\")[1]) - 1\n      updatedAmount = parseInt( inventory_sheet.getCell(inventory_row, 2).getValue().toString() )-\n      this.parts_list[i].qty\n\n      inventory_sheet.getCell(inventory_row,2).setValue(updatedAmount)\n      if (parseInt(inventory_sheet.getCell(inventory_row, 2).getValue().toString()) < 0) {\n        inventory_sheet.getCell(inventory_row, 2).setValue(0)\n      }\n    }\n    \n\n  }\n}\n\n\n\nclass parts {\n  qty: number\n  id: number\n  desc: string\n  constructor(qty, id, desc) {\n    this.qty = qty,\n      this.id = id,\n      this.desc = desc\n  }\n}\n\nfunction main(workbook: ExcelScript.Workbook) {\n  // Your code here\n  this.workbook = workbook\n  interface_sheet = workbook.getWorksheet(\"Interface\")\n  inventory_sheet = workbook.getWorksheet(\"Inventory\")\n  inventory_range = inventory_sheet.getTable(\"Table3\").getRangeBetweenHeaderAndTotal()\n  database_sheet = workbook.getWorksheet(\"Database\")\n  database_table = database_sheet.getTable(\"Table1\")\n  database_range = database_table.getRangeBetweenHeaderAndTotal()\n  parts_table = interface_sheet.getTable(\"Table4\")\n  archive_table = workbook.getWorksheet(\"Archive\").getTable(\"Table5\")\n  ticket = new interface_form(\n    interface_sheet.getCell(1, 1).getValue().toString(),//ticket#\n    interface_sheet.getCell(15, 1).getValue().toString(),//technician\n    interface_sheet.getCell(16, 2).getValue().toString(),//corrective_action\n    interface_sheet.getCell(22, 6).getValue().toString(),//completion_date\n    interface_sheet.getCell(17, 1).getValue().toString(),//severity\n    interface_sheet.getCell(23, 1).getValue().toString()//ticket_cost\n  )\n\n  ticket.savePartsTable()\n  ticket.updateInventory()\n  ticket.updateDatabase()\n  archiveTicket()\n  resetInterface()\n}\n\nfunction archiveTicket() {\n  var row_data: string[] = new Array()\n  if (ticket.completion_date == \"\") {//ticket still open\n    return\n  }\n  else {//ticket is closed therefore archive it\n    var target_row = find_row(ticket.ticket_num)\n    //EZ/lazy way to get row's data in an order archive table uses\n    row_data.push(database_range.getCell(target_row, 0).getValue().toString())\n    row_data.push(database_range.getCell(target_row, 2).getValue().toString())\n    row_data.push(ticket.completion_date)\n    row_data.push(database_range.getCell(target_row, 3).getValue().toString())\n    row_data.push(database_range.getCell(target_row, 4).getValue().toString())\n    row_data.push(database_range.getCell(target_row, 5).getValue().toString())\n    row_data.push(database_range.getCell(target_row, 6).getValue().toString())\n    row_data.push(database_range.getCell(target_row, 7).getValue().toString())\n    row_data.push(database_range.getCell(target_row, 8).getValue().toString())\n    row_data.push(database_range.getCell(target_row, 9).getValue().toString())\n    row_data.push(database_range.getCell(target_row, 10).getValue().toString())\n    row_data.push(database_range.getCell(target_row, 11).getValue().toString())\n    row_data.push(database_range.getCell(target_row, 12).getValue().toString())\n    row_data.push(database_range.getCell(target_row, 13).getValue().toString())\n    row_data.push(database_range.getCell(target_row, 14).getValue().toString())\n    row_data.push(database_range.getCell(target_row, 15).getValue().toString())\n    row_data.push(database_range.getCell(target_row, 16).getValue().toString())\n    row_data.push(database_range.getCell(target_row, 17).getValue().toString())\n    //add row to archive table\n    archive_table.addRow(-1, row_data)\n    //remove row from database table\n    database_table.deleteRowsAt(target_row)\n  }\n}\n\nfunction find_row(search_value: string) {\n  var targetCell = database_table.getRangeBetweenHeaderAndTotal().find(ticket.ticket_num, {\n    completeMatch: true,\n    searchDirection: ExcelScript.SearchDirection.forward\n  })\n  var targetRow: number = -1\n  if (targetCell) {//if ID is in table\n    targetRow = parseInt(targetCell.getAddress().split(\"A\")[1]) - 2\n    return targetRow\n  } else {//if ID is not in table\n    console.log(\"ERROR: ID IS NOT IN TABLE\")\n    return -1\n  }\n}\n\n\nfunction resetInterface() {\n  //reset form\n  /* USER DATA */\n  interface_sheet.getCell(4, 1).setValue(\"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,3)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,3),\\\"\\\")\")//Date\n  interface_sheet.getCell(4, 3).setValue(\"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,3)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,3),\\\"\\\")\")//Time\n  interface_sheet.getCell(4, 6).setValue(\"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,12)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,12),\\\"\\\")\")//model\n  interface_sheet.getCell(5, 2).setValue(\"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,10)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,10),\\\"\\\")\")//Equipment Type\n  interface_sheet.getCell(5, 6).setValue(\"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,11)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,11),\\\"\\\")\")//Unit#\n  interface_sheet.getCell(6, 2).setValue(\"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,9)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,9),\\\"\\\")\")//Location Found\n  interface_sheet.getCell(6, 6).setValue(\"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,14)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,14),\\\"\\\")\")//needs tow?\n  interface_sheet.getCell(7, 3).setValue(\"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,13)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,13),\\\"\\\")\")//Department\n  interface_sheet.getCell(8, 2).setValue(\"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,6)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,6),\\\"\\\")\")//Employee ID\n  interface_sheet.getCell(9, 1).setValue(\"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,5)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,5),\\\"\\\")\")//Name\n  interface_sheet.getCell(9, 5).setValue(\"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,4)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,4),\\\"\\\")\")//Email\n  interface_sheet.getCell(10, 2).setValue(\"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,7)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,7),\\\"\\\")\")//Reported Problem\n  /* MAINTENANCE ONLY */\n  interface_sheet.getCell(15, 1).setValue(\"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,15)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,15),\\\"\\\")\")//technician\n  interface_sheet.getCell(16, 2).setValue(\"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,16)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,16),\\\"\\\")\")//corrective_action\n  interface_sheet.getCell(17, 1).setValue(\"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,8)=\\\"Low\\\",\\\"Low\\\",IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,8)=\\\"Moderate\\\",\\\"Moderate\\\",\\\"Severe\\\"))\")//severity\n  interface_sheet.getCell(22, 2).setValue(\"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,3)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,3),\\\"\\\")\")//Start Date\n  interface_sheet.getCell(22, 6).setValue(\"\")//completion_date\n  interface_sheet.getCell(23, 1).setValue(\"=SUM(Table4[Cost])\")//Ticket Cost\n\n\n  /* PARTS TABLE */\n  parts_table.getRangeBetweenHeaderAndTotal().getOffsetRange(1, 0).clear()\n  parts_table.getRangeBetweenHeaderAndTotal().getCell(0, 0).clear()\n  parts_table.getRangeBetweenHeaderAndTotal().getCell(0, 1).clear()\n  parts_table.resize(\"A27:E28\")\n  parts_table.getRangeBetweenHeaderAndTotal().getCell(0, 2).setValue(\"=IF(INDEX(Table3,MATCH($B28,Inventory!$A:$A,0)-1,2)<>\\\"\\\",INDEX(Table3,MATCH($B28,Inventory!$A:$A,0)-1,2),\\\"\\\")\")//description\n  parts_table.getRangeBetweenHeaderAndTotal().getCell(0, 3).setValue(\"=IF(INDEX(Table3,MATCH($B28,Inventory!$A:$A,0)-1,3)<>\\\"\\\",INDEX(Table3,MATCH($B28,Inventory!$A:$A,0)-1,3),\\\"\\\")\")//inventory\n  parts_table.getRangeBetweenHeaderAndTotal().getCell(0, 4).setValue(\"=IFERROR( INDEX(Table3,MATCH($B28,Inventory!$A:$A,0)-1,11)*$A28,\\\"\\\")\")//cost\n  parts_table.resize(\"A27:E40\")\n}","description":"","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}