{"version":"0.2.0","body":"/*\nAUTHOR: Raymond Levi Triana\nPURPOSE: Updated the database within maintenance requests\nDATE: 10/05/2022\nWORKBOOK: Maintenance Request\n*/\nvar databaseSheet: ExcelScript.Worksheet = null\nvar databaseTable: ExcelScript.Table = null\nvar databaseRange: ExcelScript.Range=null\nvar interfaceSheet: ExcelScript.Worksheet=null\nvar searchID: number = 0\nvar named_cells:cell_map\n\n\nclass ticket{\n  /*Houses the data used to update a ticket*/\n  constructor(technician,corrective_action){\n    this.technician = technician\n    this.corrective_action = corrective_action\n    this.parts_list=new Array()\n    //list_of_parts: parts[1]\n  }\n  technician:string\n  corrective_action:string\n  parts_list:parts[]=null\n}\n//each individual part used in repairs\nclass parts{\n  constructor(id:number,quantity:number,description:string){\n    this.id=id\n    this.quantity=quantity\n    this.description=description\n  }\n  id:number\n  quantity:number\n  description:string\n}\n\nclass vector_2{\n  constructor(x:number,y:number){\n    this.x=x\n    this.y=y\n  }\n  x:number\n  y:number\n}\n\nclass cell_map{\n  ticket_num:vector_2\n  date:vector_2\n  time:vector_2\n  model:vector_2\n  equip_type:vector_2\n  unit_num:vector_2\n  location:vector_2\n  needs_tow:vector_2\n  equip_department:vector_2\n  employee_id:vector_2\n  name:vector_2\n  email:vector_2\n  reported_problem:vector_2\n  technician:vector_2\n  corrective_action:vector_2\n  start_date:vector_2\n  completion_date:vector_2\n  area_inspected:vector_2\n  hr_meter:vector_2\n  parts_desc:vector_2\n  parts_inv:vector_2\n  constructor(){\n    this.ticket_num = new vector_2(1,1)\n    this.date = new vector_2(4,1)\n    this.time = new vector_2(4,3)\n    this.model = new vector_2(4,6)\n    this.equip_type = new vector_2(5,2)\n    this.unit_num = new vector_2(5,6)\n    this.location = new vector_2(6,2)\n    this.needs_tow = new vector_2(6,6)\n    this.equip_department = new vector_2(7,2)\n    this.employee_id = new vector_2(8,1)\n    this.name = new vector_2(9,1)\n    this.email = new vector_2(9,5)\n    this.reported_problem = new vector_2(10,2)\n    this.technician = new vector_2(15,1)\n    this.corrective_action = new vector_2(16,2)\n    this.start_date = new vector_2(22,2)\n    this.completion_date = new vector_2(22,6)\n    this.area_inspected = new vector_2(23,5)\n    this.hr_meter = new vector_2(23,7)\n    this.parts_desc = new vector_2(25,2)\n    this.parts_inv = new vector_2(25,3)\n  }\n  setValue(worksheet:ExcelScript.Worksheet,coords:vector_2,value:string){\n    worksheet.getCell(coords.x,coords.y).setValue(value)\n  }\n  getValue(worksheet:ExcelScript.Worksheet,coords:vector_2){\n    return worksheet.getCell(coords.x,coords.y).getValue().toString()\n  }\n}\n\nfunction main(workbook: ExcelScript.Workbook):number {\n  named_cells = new cell_map()\n  databaseSheet = workbook.getWorksheet(\"Database\")\n  databaseTable = databaseSheet.getTable(\"table1\")\n  databaseRange = databaseTable.getRangeBetweenHeaderAndTotal()\n  interfaceSheet = workbook.getWorksheet(\"Interface\")\n  searchID = Number.parseInt(named_cells.getValue(interfaceSheet,named_cells.ticket_num))\n  if(!databaseTable){//exit if table* is invalid\n    console.log(\"ERR: targetTable* is invalid in script: Maintenance Request Submit Form\")\n    return -1\n  }\n  sortByID()\n  var targetRow:number = findRow(workbook,searchID)//cache the non-zero indexed row number\n\n  if(targetRow){\n    updateRow(workbook,targetRow)\n  }else{\n    return -1\n  }\n  sortBySeverity()\n  resetInterface(workbook)\n  console.log(\"Database successfully updated!\")\n  return 0\n}\n\nfunction updateRow(workbook: ExcelScript.Workbook, targetRow: number){\n\n  //UPDATE: + table offset to get cell in case the table for some reason doesnt start at row 1???\n\n  var new_ticket:ticket = cacheTicket(workbook)\n  updateInventory(workbook,new_ticket,targetRow)\n  saveTicket(workbook,new_ticket,targetRow)\n\n}\n\nfunction cacheTicket(workbook:ExcelScript.Workbook){\n  /*reads the data from the editable area of the interface*/\n  var partsTable = workbook.getWorksheet(\"Interface\").getTable(\"Table4\")\n  var partsRange = partsTable.getRangeBetweenHeaderAndTotal()\n  var local_ticket = new ticket(\n    named_cells.getValue(interfaceSheet,named_cells.technician),\n    named_cells.getValue(interfaceSheet,named_cells.corrective_action)\n    //interfaceSheet.getCell(15, 1).getValue(),//technician\n    //interfaceSheet.getCell(16, 2).getValue()//corrective action\n  )\n  for(var i=0;i<partsTable.getRowCount();i++){//loop through all the rows in parts table\n    //read and store the parts in the array\n    local_ticket.parts_list.push(new parts(convertToNum(partsRange.getCell(i, 1).getValue()),convertToNum( partsRange.getCell(i, 0).getValue()), partsRange.getCell(i,2).getValue().toString()))\n  }\n  \n  return local_ticket\n}\n\nfunction updateInventory(workbook:ExcelScript.Workbook,new_ticket:ticket,targetRow:number){\n  //add the current quantity from database back into inv\n  //subtract the new quantity in the ticket from inv\n  var inventory_table = workbook.getWorksheet(\"Inventory\").getTable(\"Table3\")\n  var inventory_range = inventory_table.getRangeBetweenHeaderAndTotal()\n  var stored_parts = databaseRange.getCell(targetRow-2,16).getValue().toString().split(\"\\n\")\n  let ascNumSort: ExcelScript.SortField = {\n    ascending: true,\n    color: \"000000\",\n    key: 0,\n    sortOn: ExcelScript.SortOn.value\n  }\n  inventory_table.getSort().apply([ascNumSort])//apply an ascending value sort to column 'ID'\n  if(stored_parts[0]!=\"\"){\n    for(var i=0;i<stored_parts.length-1;i++){//loop through the stored parts in database\n      var stored_id = stored_parts[i].split(\"ID:\")[1].split(\",Qty:\")[0]\n      var stored_qty = stored_parts[i].split(\"Qty:\")[1].split(\",Desc:\")[0]\n      //print ID\n      //ID could be in the table\n      let targetCell = inventory_range.find(stored_id, {//Returns in A1 format (\"Database!A7\")\n        completeMatch: true,\n        searchDirection: ExcelScript.SearchDirection.forward\n      })\n      if (targetCell!=undefined) {//if ID is in table\n        targetRow = convertToNum(targetCell.getAddress().split(\"A\")[1])\n        var inventory_qty = convertToNum(workbook.getWorksheet(\"Inventory\").getCell(targetRow-1, 2).getValue())\n        inventory_qty+=convertToNum(stored_qty)\n        inventory_qty-=new_ticket.parts_list[i].quantity\n        workbook.getWorksheet(\"Inventory\").getCell(targetRow-1,2).setValue(inventory_qty)\n      } else {//if ID is not in table\n        console.log(\"ERROR: ID IS NOT IN TABLE\")\n        return null\n      }\n    }\n    return null\n  }else{\n    //NO PARTS STORED YET\n    for(var i=0;i<new_ticket.parts_list.length;i++){\n      let targetCell = inventory_range.find(new_ticket.parts_list[i].id.toString(), {//Returns in A1 format (\"Database!A7\")\n        completeMatch: true,\n        searchDirection: ExcelScript.SearchDirection.forward\n      })\n      if (targetCell != undefined) {//if ID is in table\n        targetRow = convertToNum(targetCell.getAddress().split(\"A\")[1])\n        var inventory_qty = convertToNum(workbook.getWorksheet(\"Inventory\").getCell(targetRow - 1, 2).getValue())\n        inventory_qty -= new_ticket.parts_list[i].quantity\n        workbook.getWorksheet(\"Inventory\").getCell(targetRow - 1, 2).setValue(inventory_qty)\n        console.log(inventory_qty)\n      } else {//if ID is not in table\n        console.log(\"ERROR: ID IS NOT IN TABLE\")\n        return null\n      }\n    }\n  }\n}\n\nfunction saveTicket(workbook:ExcelScript.Workbook,new_ticket:ticket,targetRow:number){\n  databaseRange.getCell(targetRow - 2, 14).setValue(new_ticket.technician)//save technician\n  databaseRange.getCell(targetRow - 2, 15).setValue(new_ticket.corrective_action)//save corrective action\n\n  var parts_string:string =  \"\"\n  for(var i=0;i<new_ticket.parts_list.length;i++){//loop through parts list\n    parts_string +=\"[\"+i+\"]\"+\"{\"+\"ID:\"+new_ticket.parts_list[i].id.toString()+\",\"+\"Qty:\"+new_ticket.parts_list[i].quantity.toString()+\",\"+\"Desc:\"+new_ticket.parts_list[i].description+\"}\"+\"\\n\"\n  }\n  databaseRange.getCell(targetRow - 2, 16).setValue(parts_string)//save parts\n}\n\n\n\nfunction findRow(workbook: ExcelScript.Workbook,searchID: number){\n  /*Searches the Database for the row according to its ID and caches it*/\n\n  //check if ID could be in the table\n  if(searchID > convertToNum(databaseRange.getCell(databaseTable.getRowCount()-1,0).getValue())){\n    console.log(\"ERR: ID is larger than largest ID in the table\")\n    return null\n  }\n  if(searchID < convertToNum(databaseRange.getCell(0,0).getValue())){\n    console.log(\"ERR: ID is smaller than the smallest ID in the table\")\n    return null\n  }\n\n  //ID could be in the table\n  let targetCell = databaseRange.find(searchID.toString(), {//Returns in A1 format (\"Database!A7\")\n    completeMatch: true,\n    searchDirection: ExcelScript.SearchDirection.forward\n  })\n  if(targetCell){//if ID is in table\n    return convertToNum(targetCell.getAddress().split(\"A\")[1])\n  }else{//if ID is not in table\n    console.log(\"ERROR: ID IS NOT IN TABLE\")\n    return null\n  }\n}\n\n\n\nfunction sortByID() {\n  let ascNumSort: ExcelScript.SortField = {\n    ascending: true,\n    color: \"000000\",\n    key: 0,\n    sortOn: ExcelScript.SortOn.value\n  }\n  databaseTable.getSort().apply([ascNumSort])//apply an ascending value sort to column 'ID'\n}\n\nfunction sortBySeverity() {\n  let severitySort: ExcelScript.SortField = {\n    ascending: false,\n    color: \"000000\",\n    key: 7,\n    dataOption: ExcelScript.SortDataOption.textAsNumber,\n    sortOn: ExcelScript.SortOn.value\n  }\n  databaseTable.getSort().apply([severitySort])//sort by severity\n}\n\nfunction convertToNum(value: string | number | boolean){\n  return Number.parseInt(value.toString())\n}\n\nfunction resetInterface(workbook: ExcelScript.Workbook){\n  /*\n  RESETTING ABOVE MAINTENANCE LINE UNNECESSARY AFTER WORKSHEET PROTECTION.\n  DELETE THOSE FOR FINAL PRODUCT\n  */\n  /*Resets the interface worksheet by adding formulas back in*/\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.date,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,2)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,2),\\\"\\\")\"\n    )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.time,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,2)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,2),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.model,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,12)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,12),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.equip_type,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,10)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,10),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.unit_num,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,11)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,11),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.location,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,9)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,9),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.needs_tow,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,14)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,14),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.equip_department,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,13)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,13),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.employee_id,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,6)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,6),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.name,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,5)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,5),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.email,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,4)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,4),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.reported_problem,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,7)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,7),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.technician,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,15)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,15),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.corrective_action,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,16)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,16),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.start_date,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,2)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,2),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.completion_date,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,3)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,3),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.area_inspected,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,3)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,5),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.hr_meter,\n    \"=IF(INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,3)<>\\\"\\\",INDEX(Table1,MATCH($B$2,Database!$A:$A,0)-1,5),\\\"\\\")\"\n  )\n\n  /*RESET PARTS TABLE*/\n  clearPartsTable()\n}\n\nfunction clearPartsTable(){\n  /*add code to erase all entries in the parts table*/\n\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.parts_desc,\n    \"=IF(INDEX(Table3,MATCH($B26,Inventory!$A:$A,0)-1,2)<>\\\"\\\",INDEX(Table3,MATCH($B26,Inventory!$A:$A,0)-1,2),\\\"\\\")\"\n  )\n  named_cells.setValue(\n    interfaceSheet,\n    named_cells.parts_inv,\n    \"=IF(INDEX(Table3,MATCH($B26,Inventory!$A:$A,0)-1,3)<>\\\"\\\",INDEX(Table3,MATCH($B26,Inventory!$A:$A,0)-1,3),\\\"\\\")\"\n  )\n}","description":"","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{\"result\":{\"type\":\"number\"}}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}