{"version":"0.2.0","body":"/*\nAUTHOR: Raymond Levi Triana\nDATE: 10/31/22\nPURPOSE: Manages the Door Sheet Buffer table which acts as a middle man between door sheet and security checkpoint to allow the use of formulas\nWORKBOOK: Security Checkpoint\n*/\nclass entry {\n  constructor(route, trailer, yard, tractor, shuttle, outTime, dolly) {\n    this.route_id = route\n    this.trailer_id = trailer\n    this.yard = yard\n    this.tractor_id = tractor\n    this.shuttle = shuttle\n    this.out_time = outTime\n    this.dolly_num = dolly\n  }\n  route_id: string\n  trailer_id: string\n  yard: string\n  tractor_id: string\n  shuttle: string\n  out_time: string\n  dolly_num: string\n}\nvar global_workbook: ExcelScript.Workbook\nvar interface_name = \"Security CheckPoint\"\n\n\nvar tickets: entry[] = new Array()\n\n\nfunction main(workbook: ExcelScript.Workbook) {\n  update_links(workbook)\n  init_script(workbook)\n  save_buffer()\n  clear_interface()\n}\n\nfunction update_links(workbook: ExcelScript.Workbook) {\n  workbook.refreshAllLinksToLinkedWorkbooks()\n}\n\nfunction init_script(workbook: ExcelScript.Workbook) {\n  global_workbook = workbook\n  var interface_values = workbook.getWorksheet(interface_name).getRange(\"B13:K15\").getValues()\n\n  for (var row in interface_values) {\n    if (interface_values[row][1] == \"IN DATABASE >>\" && interface_values[row][3] == \"MATCH >>\" && interface_values[row][5] == \"MATCH >>\") {\n      tickets.push(\n        new entry(\n          interface_values[row][0],\n          interface_values[row][2],\n          interface_values[row][4],\n          interface_values[row][6],\n          interface_values[row][8],\n          interface_values[row][9],\n          interface_values[row][7]\n        )\n      )\n    }\n  }\n}\n\nfunction save_buffer() {\n  var buffer_sheet = global_workbook.getWorksheet(\"Buffer\")\n\n  buffer_sheet.setVisibility(ExcelScript.SheetVisibility.visible)\n  buffer_sheet.getProtection().unprotect()\n\n  for (var ticket in tickets) {\n    if (parseInt(tickets[ticket].out_time) < 1)\n      tickets[ticket].out_time = (parseFloat(tickets[ticket].out_time) + 1.0).toString()\n\n\n\n\n    var row_num = search_range(tickets[ticket].route_id.toString(), buffer_sheet.getTable(\"DoorSheetBuffer\").getRangeBetweenHeaderAndTotal().getColumn(0), true)\n    buffer_sheet.getCell(row_num - 1, 1).setValue(tickets[ticket].tractor_id)\n    buffer_sheet.getCell(row_num - 1, 2).setValue(tickets[ticket].dolly_num)\n    buffer_sheet.getCell(row_num - 1, 3).setValue(tickets[ticket].shuttle)\n    buffer_sheet.getCell(row_num - 1, 4).setValue(tickets[ticket].out_time)\n  }\n\n\n  buffer_sheet.getProtection().protect()\n  buffer_sheet.setVisibility(ExcelScript.SheetVisibility.veryHidden)\n}\n\nfunction print_err(msg: string) {\n  global_workbook.getWorksheet(interface_name).getCell(5, 0).setValue(msg)\n}\n\nfunction search_range(search_term: string, range: ExcelScript.Range, exactMatch: boolean) {\n  /*Searches through a range and either returns the row the term was found on or NaN*/\n  let targetCell = range.find(search_term, {\n    completeMatch: exactMatch,\n    searchDirection: ExcelScript.SearchDirection.forward\n  })\n  try { targetCell.getAddress() } catch{ return NaN }\n  if (targetCell.getAddress() != undefined) {//parse first occurence\n    let tempRow = targetCell.getAddress().split(\"!\")[1].toString()\n    tempRow = tempRow.substring(1, tempRow.length)\n    return parseInt(tempRow)\n  }\n  else {\n    return NaN\n  }\n\n}\n\n\nfunction clear_interface() {\n  var sheet = global_workbook.getWorksheet(interface_name)\n\n  for (var row = 12; row < 15; row++) {\n    if (sheet.getCell(row, 2).getValue() == \"IN DATABASE >>\" && sheet.getCell(row, 4).getValue() == \"MATCH >>\" && sheet.getCell(row, 6).getValue() == \"MATCH >>\") {\n      sheet.getCell(row, 1).setValue(\"\")\n      sheet.getCell(row, 3).setValue(\"\")\n      sheet.getCell(row, 5).setValue(\"\")\n      sheet.getCell(row, 7).setValue(\"\")\n      sheet.getCell(row, 8).setValue(\"\")\n      sheet.getCell(row, 9).setValue(\"\")\n      sheet.getCell(row, 10).setValue(\"\")\n    }\n\n  }\n}","description":"","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}